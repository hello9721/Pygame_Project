Main.py

메인 루프
> 게임 객체 선언
> init > 스크린의 너비, 높이 설정
       + 타이틀 설정 + 실행중 체크 + fps 설정 + 폰트 로드 + load_data 실행
> load_data ( 최고 점수 로드 + 설정된 이미지 경로를 토대로 스프라이트시트 객체화 )

show_start_screen 실행
> 배경색 설정 + 텍스트 표시 및 최고 점수 표시 + wait_for_key 실행
> wait_for_key
  ( 이벤트 발생 기다림 > QUIT 이벤트시 실행종료 + 아무키 눌렀다 떼는 이벤트 발생시 기다림 종료 )

g.running 이 T 일경우
> new
  ( 새로운 게임 시작 >
          스코어 0부터 + 모든 스프라이트 그룹과 플랫폼 스프라이트 그룹 생성
          + Player 객체 생성후 모든 스프라이트 그룹에 추가
          + 플랫폼 리스트에서 플랫폼 하나를 객체로 만들어 두가지 그룹에 추가 + run 실행 )
> run (  게임중 체크 + 게임중일때 FPS 설정 + events 실행 + update 실행 + draw 실행 )
> events ( 모든 이벤트를 가져오면서 Space눌렀다 뗐을때 jump와 jump_cut 실행 )
> update
  ( 모든 스프라이트 그룹의 요소들 업데이트 + player와 platform 충돌처리
          + 4분의 1 지점까지 올라가면 화면 밖의 platform 삭제 + 삭제 수에 따른 점수 추가
          + player이 화면밖으로 떨어지면 삭제 + 화면위로 올라간 모든 요소 삭제
          + 게임 중 False + player가 죽지 않을 경우 새로운 랜덤 platform 6개 추가 )
> draw ( 화면에 속한 요소 모두 표시 + 업데이트 )
> show_go_screen
  ( 실행중 False 시에 종료 + 실행중일 때 게임오버 화면 + 최고점수 체크 + wait_for_key 실행)
> wait_for_key ( 다시시작 )


sprites.py

Spritesheet 클래스 ( main.py의 load_data 실행 될 때 객체화 됨 )
> 생성자 ( self.Spritesheet 에 이미지 로드 및 변환 )
> get_image ( 주어진 좌표 및 크기에 따라 Spritesheet에서 이미지 불러와서 반환 )

Player 클래스 ( main.py의 new 실행 될 때 객체화 됨 )
> 생성자
  ( 게임 클래스를 받음 + 상태를 false와 0으로 초기화 + load_images 실행
          + 플레이어 이미지 설정 및 객체화 및 중앙 위치 설정
          + 2차원 공간에서 위치나 속도등을 표현할때 유용한 Vector2를 이용하여
            위치, 속도, 가속도를 벡터로 표시 )
> load_images
  ( 받았던 game 클래스에서 Spritesheet의 특정 부분의 이미지를 받아와 서있을때
    사용할 이미지 리스트 생성
          + 이미지 리스트의 배경색인 black을 제외하여 캐릭터 이미지만 나오게끔 설정
          + 오른쪽으로 걸을 때 이미지를 위와 같은 방법으로 로드 및 배경 제외 설정
          + 왼쪽으로 걸을 때 이미지를 위와 같은 방법으로 로드 및 배경 제외 설정 )
> jump
  ( 이미지의 y를 0.1 아래로 이동
          + player 객체와 platform 그룹이 충돌이 있다면 (= 땅을 밟고 있다면) hits
          + 이미지의 y를 원상복귀
          + hits가 True고 jumping이 False면 jumping을 True로, vel의 y를 -Player_jump로 ( 점프 속도 ))
> jump_cut ( jumping이 True 고 vel의 y가 -3보다 작다면 vel의 y는 -3 )
> update
  ( animate 실행 + player가 받는 중력을 가속도의 y로 + 좌우 키 입력에 따른 가속도 x의 변화
          + 마찰계수에 따른 가속도의 x 설정
          + 가속도를 적용한 속도 설정 + x의 속도가 0.1 이하라면 0처리
          + 속도와 가속도에 따른 위치 설정 + 양옆으로 넘어간다면 화면 반대쪽에서 나옴
          + 이미지의 아래쪽 중앙의 좌표를 위치좌표로 설정 )
> animate 
  ( 현재 tick 로드 + 속도의 x 가 0이 아닐때는 walking True, x가 0일때는 walking False
          + walking이 True 일때 마지막 업데이트와 지금의 차이가 200이상일때
            마지막 업데이트를 지금으로, 현재 프레임은 현재프레임 + 1에 이미지 리스트의 갯수를 나눈 나머지로 설정
            (이미지 리스트를 반복해서 표시하고 현재 순서 계산) 하고 player의 아래 좌표를 bottom으로
          + 속도의 x가 0 초과이라면 오른쪽으로 움직이는 리스트를,
            속도의 x가 0 이하라면 왼쪽으로 움직이는 리스트를 이미지로 넣고 객체화 후 bottom으로 아래좌표 설정
          + jumping과 walking이 모두 False 일때 마지막 업데이트롸 지금의 차이가 350 이상일때
            마지막 업데이트를 지금으로, 현재 프레임은 현재프레임 + 1에 이미지 리스트의 갯수를 나눈 나머지로
            설정하고 player의 아래 좌표를 bottom으로
          + 이미지 리스트는 서있는 이미지로 객체화 후 bottom으로 아래좌표 설정)

Platform 클래스 ( main.py의 new에서 객체화 )
> 생성자 ( game 클래스와 x, y를 받아서 
          + game 클래스 가져오고, 플랫폼 이미지 가져오기 + 이미지에서 랜덤 초이스
          + 초이스된 black 배경을 제거, 객체화 x, y 설정)